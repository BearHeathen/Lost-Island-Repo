/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
 // Cpp language plugin modified by Ben Hopkins (kode80) for Unity shader support 
/// <reference path="../declares.d.ts" />
'use strict';
define(["require", "exports"], function (require, exports) {
    exports.language = {
        displayName: 'Unity Shader',
        name: 'shader',
        mimeTypes: [],
        defaultToken: '',
        lineComment: '//',
        blockCommentStart: '/*',
        blockCommentEnd: '*/',
        autoClosingPairs: [['{', '}'], ['[', ']'], ['(', ')'], ['"', '"']],
        keywords: [
            'struct',
            'discard',
            'return',
            'technique',
            'pass',
            'compile',
            'trunc',
            'arbfp1',
            'arbvp1',
            'fp20',
            'fp30',
            'fp40',
            'glslf',
            'glslg',
            'glslv',
            'gp4',
            'gp4fp',
            'gp4gp',
            'gp4vp',
            'hlslf',
            'hlslv',
            'ps_1_1',
            'ps_1_2',
            'ps_1_3',
            'ps_2_0',
            'ps_2_x',
            'ps_3_0',
            'ps_4_0',
            'vp20',
            'vp30',
            'vp40',
            'vs_4_0',
            'gs_4_0',
            'ps_2_a',
            'vs_2_0',
            'return',
            'bool',
            'const',
            'static',
            'uniform',
            'varying',
            'register',
            'in',
            'inout',
            'interface',
            'out',
            'void',
            'while',
            'for',
            'do',
            'if',
            'else',
            'typedef',
            '_SEQ',
            '_SGE',
            '_SGT',
            '_SLE',
            '_SLT',
            '_SNE',
            'HPOS',
            'POSITION',
            'PSIZ',
            'WPOS',
            'COLOR',
            'COLOR0',
            'COLOR1',
            'COLOR2',
            'COLOR3',
            'COL0',
            'COL1',
            'BCOL0',
            'BCOL1',
            'FOGP',
            'FOGC',
            'NRML',
            'NORMAL',
            'TEXCOORD0',
            'TEXCOORD1',
            'TEXCOORD2',
            'TEXCOORD3',
            'TEXCOORD4',
            'TEXCOORD5',
            'TEXCOORD6',
            'TEXCOORD7',
            'TANGENT0',
            'TANGENT1',
            'TANGENT2',
            'TANGENT3',
            'TANGENT4',
            'TANGENT5',
            'TANGENT6',
            'TANGENT7',
            'TEX0',
            'TEX1',
            'TEX2',
            'TEX3',
            'TEX4',
            'TEX5',
            'TEX6',
            'TEX7',
            'DEPR',
            'DEPTH',
            'ATTR0',
            'ATTR1',
            'ATTR2',
            'ATTR3',
            'ATTR4',
            'ATTR5',
            'ATTR6',
            'ATTR7',
            'ATTR8',
            'ATTR9',
            'ATTR10',
            'ATTR11',
            'ATTR12',
            'ATTR13',
            'ATTR14',
            'ATTR15',
            'POINT',
            'POINT_OUT',
            'LINE',
            'LINE_ADJ',
            'LINE_OUT',
            'TRIANGLE_OUT',
            'TRIANGLE',
            'TRIANGLE_ADJ',
            'BINORMAL0',
            'LPROJ_COORD',
            'SV_CLIPDISTANCE',
            'SV_CULLDISTANCE',
            'SV_COVERAGE',
            'SV_DEPTH',
            'SV_DEPTHGREATEREQUAL',
            'SV_DEPTHLESSEQUAL',
            'SV_DISPATCHTHREADID',
            'SV_DOMAINLOCATION',
            'SV_GROUPID',
            'SV_GROUPINDEX',
            'SV_GROUPTHREADID',
            'SV_GSINSTANCEID',
            'SV_INNERCOVERAGE',
            'SV_INSIDETESSFACTOR',
            'SV_INSTANCEID',
            'SV_ISFRONTFACE',
            'SV_OUTPUTCONTROLPOINTID',
            'SV_POSITION',
            'SV_PRIMITIVEID',
            'SV_RENDERTARGETARRAYINDEX',
            'SV_RENDERTARGETARRAYINDEX',
            'SV_SAMPLEINDEX',
            'SV_STENCILREF',
            'SV_TARGET',
            'SV_TESSFACTOR',
            'SV_VERTEXID',
            'SV_VIEWPORTARRAYINDEX',
            'int1',
            'int2',
            'int3',
            'int4',
            'float',
            'float1',
            'float2',
            'float3',
            'float4',
            'float1x1',
            'float1x2',
            'float1x3',
            'float1x4',
            'float2x1',
            'float2x2',
            'float2x3',
            'float2x4',
            'float3x1',
            'float3x2',
            'float3x3',
            'float3x4',
            'float4x1',
            'float4x2',
            'float4x3',
            'float4x4',
            'fixed',
            'fixed1',
            'fixed2',
            'fixed3',
            'fixed4',
            'half',
            'half1',
            'half2',
            'half3',
            'half4',
            'string',
            'int',
            'sincos',
            'abs',
            'acos',
            'asin',
            'atan',
            'atan2',
            'ceil',
            'clamp',
            'cos',
            'cosh',
            'cross',
            'ddx',
            'ddy',
            'degrees',
            'dot',
            'exp',
            'exp2',
            'floor',
            'fmod',
            'frexp',
            'frac',
            'isfinite',
            'isinf',
            'isnan',
            'ldexp',
            'log',
            'log2',
            'log10',
            'max',
            'min',
            'mix',
            'mul',
            'lerp',
            'modf',
            'noise',
            'pow',
            'radians',
            'round',
            'rsqrt',
            'sign',
            'sin',
            'sinh',
            'smoothstep',
            'step',
            'sqrt',
            'tan',
            'tanh',
            'distance',
            'fresnel',
            'length',
            'normalize',
            'reflect',
            'reflectn',
            'refract',
            'refractn',
            'tex1D',
            'f1tex1D',
            'f2tex1D',
            'f3tex1D',
            'f4tex1D',
            'h1tex1D',
            'h2tex1D',
            'h3tex1D',
            'h4tex1D',
            'x1tex1D',
            'x2tex1D',
            'x3tex1D',
            'x4tex1D',
            'tex1Dbias',
            'tex2Dbias',
            'tex3Dbias',
            'texRECTbias',
            'texCUBEbias',
            'tex1Dlod',
            'tex2Dlod',
            'tex3Dlod',
            'texRECTlod',
            'texCUBElod',
            'tex1Dproj',
            'f1tex1Dproj',
            'f2tex1Dproj',
            'f3tex1Dproj',
            'f4tex1Dproj',
            'h1tex1Dproj',
            'h2tex1Dproj',
            'h3tex1Dproj',
            'h4tex1Dproj',
            'x1tex1Dproj',
            'x2tex1Dproj',
            'x3tex1Dproj',
            'x4tex1Dproj',
            'tex2D',
            'f1tex2D',
            'f2tex2D',
            'f3tex2D',
            'f4tex2D',
            'h1tex2D',
            'h2tex2D',
            'h3tex2D',
            'h4tex2D',
            'x1tex2D',
            'x2tex2D',
            'x3tex2D',
            'x4tex2D',
            'tex2Dproj',
            'f1tex2Dproj',
            'f2tex2Dproj',
            'f3tex2Dproj',
            'f4tex2Dproj',
            'h1tex2Dproj',
            'h2tex2Dproj',
            'h3tex2Dproj',
            'h4tex2Dproj',
            'x1tex2Dproj',
            'x2tex2Dproj',
            'x3tex2Dproj',
            'x4tex2Dproj',
            'tex3D',
            'f1tex3D',
            'f2tex3D',
            'f3tex3D',
            'f4tex3D',
            'h1tex3D',
            'h2tex3D',
            'h3tex3D',
            'h4tex3D',
            'x1tex3D',
            'x2tex3D',
            'x3tex3D',
            'x4tex3D',
            'tex3Dproj',
            'f1tex3Dproj',
            'f2tex3Dproj',
            'f3tex3Dproj',
            'f4tex3Dproj',
            'h1tex3Dproj',
            'h2tex3Dproj',
            'h3tex3Dproj',
            'h4tex3Dproj',
            'x1tex3Dproj',
            'x2tex3Dproj',
            'x3tex3Dproj',
            'x4tex3Dproj',
            'tex1CUBE',
            'f1texCUBE',
            'f2texCUBE',
            'f3texCUBE',
            'f4texCUBE',
            'h1texCUBE',
            'h2texCUBE',
            'h3texCUBE',
            'h4texCUBE',
            'x1texCUBE',
            'x2texCUBE',
            'x3texCUBE',
            'x4texCUBE',
            'texCUBEproj',
            'f1texCUBEproj',
            'f2texCUBEproj',
            'f3texCUBEproj',
            'f4texCUBEproj',
            'h1texCUBEproj',
            'h2texCUBEproj',
            'h3texCUBEproj',
            'h4texCUBEproj',
            'x1texCUBEproj',
            'x2texCUBEproj',
            'x3texCUBEproj',
            'x4texCUBEproj',
            'f1texCUBE',
            'f2texCUBE',
            'f3texCUBE',
            'f4texCUBE',
            'h1texCUBE',
            'h2texCUBE',
            'h3texCUBE',
            'h4texCUBE',
            'x1texCUBE',
            'x2texCUBE',
            'x3texCUBE',
            'x4texCUBE',
            'texRECT',
            'f1texRECT',
            'f2texRECT',
            'f3texRECT',
            'f4texRECT',
            'h1texRECT',
            'h2texRECT',
            'h3texRECT',
            'h4texRECT',
            'x1texRECT',
            'x2texRECT',
            'x3texRECT',
            'x4texRECT',
            'texRECTproj',
            'f1texRECTproj',
            'f2texRECTproj',
            'f3texRECTproj',
            'f4texRECTproj',
            'h1texRECTproj',
            'h2texRECTproj',
            'h3texRECTproj',
            'h4texRECTproj',
            'x1texRECTproj',
            'x2texRECTproj',
            'x3texRECTproj',
            'x4texRECTproj',
            'f1texRECT',
            'f2texRECT',
            'f3texRECT',
            'f4texRECT',
            'h1texRECT',
            'h2texRECT',
            'h3texRECT',
            'h4texRECT',
            'x1texRECT',
            'x2texRECT',
            'x3texRECT',
            'x4texRECT',
            'texcompare2D',
            'f1texcompare2D',
            'f1texcompare2D',
            'f1texcompare2D',
            'h1texcompare2D',
            'h1texcompare2D',
            'h1texcompare2D',
            'x1texcompare2D',
            'x1texcompare2D',
            'x1texcompare2D',
            'pack_2half',
            'unpack_2half',
            'pack_4clamp1s',
            'unpack_4clamp1s',
            'application2vertex',
            'vertex2fragment',
            'sampler1D',
            'sampler1DARRAY',
            'sampler2D',
            'sampler2DARRAY',
            'sampler3D',
            'samplerCUBE',
            'samplerRECT',
            'texture',
            'texture2D',
            'sampler_state',
            'IN',
            'OUT',
            'CullMode',
            'DepthEnable',
            'BlendEnable',
            'SetVertexShader',
            'SetGeometryShader',
            'SetPixelShader',
            'SetRasterizerState',
            'SetDepthStencilState',
            'SetBlendState',
            'VertexShader',
            'ZEnable',
            'ZWriteEnable',
            'ZFunc',
            'AlphaBlendEnable',
            'PixelShader',
            'VertexProgram',
            'DepthTestEnable',
            'DepthMask',
            'CullFaceEnable',
            'DepthFunc',
            'FragmentProgram',
            'DepthWriteMask',
            'cullmode',
            'LinearMipMapLinear',
            'Linear',
            'Repeat',
            'DisableCulling',
            'DepthEnabling',
            'DisableBlend',
            'true',
            'LessEqual',
            'none',
            'false',
            'None',
            'RasterizerState',
            'DepthStencilState',
            'BlendState',
            'Wrap',
            'MIN_MAG_MIP_LINEAR',
            'ENVIRONMENT',
            'Clamp',
            'Ambient',
            'Position',
            'Specular',
            'SpecularPower',
            'DIFFUSE',
            'STANDARDSGLOBAL',
            'LEqual',
            'VIEWPORTPIXELSIZE',
            'RENDERCOLORTARGET',
            'RENDERDEPTHSTENCILTARGET'
        ],
        operators: [
            '=',
            '>',
            '<',
            '!',
            '~',
            '?',
            ':',
            '==',
            '<=',
            '>=',
            '!=',
            '&&',
            '||',
            '++',
            '--',
            '+',
            '-',
            '*',
            '/',
            '&',
            '|',
            '^',
            '%',
            '<<',
            '>>',
            '>>>',
            '+=',
            '-=',
            '*=',
            '/=',
            '&=',
            '|=',
            '^=',
            '%=',
            '<<=',
            '>>=',
            '>>>='
        ],
        // we include these common regular expressions
        symbols: /[=><!~?:&|+\-*\/\^%]+/,
        escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
        integersuffix: /(ll|LL|u|U|l|L)?(ll|LL|u|U|l|L)?/,
        floatsuffix: /[fFlL]?/,
        // The main tokenizer for our languages
        tokenizer: {
            root: [
                [/[a-zA-Z_]\w*/, { cases: { '@keywords': { token: 'keyword.$0' }, '@default': 'identifier' } }],
                { include: '@whitespace' },
                [/\[\[.*\]\]/, 'annotation'],
                [/^\s*#\w+/, 'keyword'],
                [/[{}()\[\]]/, '@brackets'],
                [/[<>](?!@symbols)/, '@brackets'],
                [/@symbols/, { cases: { '@operators': 'delimiter', '@default': '' } }],
                [/\d*\d+[eE]([\-+]?\d+)?(@floatsuffix)/, 'number.float'],
                [/\d*\.\d+([eE][\-+]?\d+)?(@floatsuffix)/, 'number.float'],
                [/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, 'number.hex'],
                [/0[0-7']*[0-7](@integersuffix)/, 'number.octal'],
                [/0[bB][0-1']*[0-1](@integersuffix)/, 'number.binary'],
                [/\d[\d']*\d(@integersuffix)/, 'number'],
                [/\d(@integersuffix)/, 'number'],
                [/[;,.]/, 'delimiter'],
                [/"([^"\\]|\\.)*$/, 'string.invalid'],
                [/"/, 'string', '@string'],
                [/'[^\\']'/, 'string'],
                [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],
                [/'/, 'string.invalid']
            ],
            whitespace: [
                [/[ \t\r\n]+/, ''],
                [/\/\*\*(?!\/)/, 'comment.doc', '@doccomment'],
                [/\/\*/, 'comment', '@comment'],
                [/\/\/.*$/, 'comment'],
            ],
            comment: [
                [/[^\/*]+/, 'comment'],
                [/\/\*/, 'comment.invalid'],
                [/\*\//, 'comment', '@pop'],
                [/[\/*]/, 'comment']
            ],
            //Identical copy of comment above, except for the addition of .doc
            doccomment: [
                [/[^\/*]+/, 'comment.doc'],
                [/\/\*/, 'comment.doc.invalid'],
                [/\*\//, 'comment.doc', '@pop'],
                [/[\/*]/, 'comment.doc']
            ],
            string: [
                [/[^\\"]+/, 'string'],
                [/@escapes/, 'string.escape'],
                [/\\./, 'string.escape.invalid'],
                [/"/, 'string', '@pop']
            ],
        },
    };
});
